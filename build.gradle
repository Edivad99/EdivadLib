import se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask
import static org.apache.commons.lang3.StringUtils.repeat

plugins {
    id 'eclipse'
    id 'idea'
    id 'net.neoforged.gradle' version '[6.0.18,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'se.bjurr.gitchangelog.git-changelog-gradle-plugin' version '1.79.0'
    id 'me.modmuss50.mod-publish-plugin' version '0.3.3'
}

version = "$minecraft_version-$mod_version"
group = 'edivad.edivadlib'
base.archivesName = 'EdivadLib'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println(repeat('*', 60))
println("Project Version: $version")
println("Java: ${System.getProperty('java.version')}")
println("JVM: ${System.getProperty('java.vm.version')} (${System.getProperty('java.vendor')})")
println("Arch: ${System.getProperty('os.arch')}")
println(repeat('*', 60))

minecraft {
    mappings channel: mappings_channel, version: mappings_version

    copyIdeResources = true

   runs {
        client {
            workingDirectory project.file('run/client')

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                edivadlib {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run/server')

            property 'forge.logging.console.level', 'debug'

            mods {
                edivadlib {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven {
        name 'TOP'
        url 'https://maven.k-4u.nl'
    }
}

dependencies {
    minecraft group: 'net.neoforged', name: 'forge', version: "$minecraft_version-$neo_version"

    compileOnly fg.deobf("mcjty.theoneprobe:theoneprobe:${top_version}") {
        transitive = false
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            mod_version: mod_version
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : 'edivadlib',
                'Specification-Vendor'    : 'Edivad99',
                'Specification-Version'   : '1',
                'Implementation-Title'    : 'edivadlib',
                'Implementation-Version'  : project.version,
                'Implementation-Vendor'   : 'Edivad99',
                'Implementation-Commit'   : 'git rev-parse HEAD'.execute().text.trim(),
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    finalizedBy 'reobfJar'
}

tasks.register('makeChangelog', GitChangelogTask) {
    fromRepo = projectDir.absolutePath.toString()
    fromCommit = '55abadd321e6bba6b4b1152673fe46e0be84aebf'
    toRef = 'HEAD'
    file = file('CHANGELOG.md')
    untaggedName = 'Next release'
    templateContent = file('changelog.mustache').text
}

publishMods {
    displayName = "EdivadLib-$minecraft_version-$mod_version"
    version = mod_version
    type = STABLE

    def changelogFile = file('CHANGELOG.md')
    changelog = changelogFile.exists() ? changelogFile.text : 'CHANGELOG.md not found'

    modLoaders.add('neoforge')
    if (minecraft_version.equals('1.20.1')) {
        modLoaders.add('forge')
    }
    file = jar.archiveFile

    curseforge {
        projectId = '638508'
        accessToken = providers.environmentVariable('CURSEFORGE_TOKEN')
        minecraftVersions.add(minecraft_version)
    }
    modrinth {
        projectId = 'a8Jk9kpK'
        accessToken = providers.environmentVariable('MODRINTH_TOKEN')
        minecraftVersions.add(minecraft_version)
    }
}
